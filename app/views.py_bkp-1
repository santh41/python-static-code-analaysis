import csv
from django.http import HttpResponse
from django.shortcuts import render
from .forms import GitHubURLForm
from .models import AnalysisResult
from .utils.github_clone import clone_repo
from .analysis.bandit_analysis import run_bandit_analysis
from .analysis.lizard_analysis import run_lizard_analysis
from .analysis.pylint_analysis import run_pylint_analysis
from .analysis.radon_analysis import run_radon_analysis

def analyze_repo(request):
    if request.method == "POST":
        form = GitHubURLForm(request.POST)
        if form.is_valid():
            repo_url = form.cleaned_data["github_url"]
            repo_path = clone_repo(repo_url)

            # Run analysis tools
            analysis_results = [
                ("Pylint", run_pylint_analysis(repo_path)),
                ("Bandit", run_bandit_analysis(repo_path)),
                ("Lizard", run_lizard_analysis(repo_path)),
                ("Radon", run_radon_analysis(repo_path)),
            ]

            # Save results in DB
            repo_name = repo_url.split("/")[-1]
            for tool, result in analysis_results:
                AnalysisResult.objects.create(repo_name=repo_name, analysis_type=tool, issue_count=len(result), details=result)

            return render(request, "results.html", {"repo_name": repo_name, "results": analysis_results})
    else:
        form = GitHubURLForm()

    return render(request, "index.html", {"form": form})

def download_csv(request):
    """Generate and return a CSV report for the latest analysis."""

    # Get the latest analysis results
    analysis_results = AnalysisResult.objects.all()

    # Create HTTP response with CSV content type
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="code_analysis_report.csv"'

    # Create CSV writer
    writer = csv.writer(response)
    
    # Write CSV header
    writer.writerow(['Repository Name', 'Analysis Type', 'Issue Count', 'Details'])

    # Write analysis data
    for result in analysis_results:
        writer.writerow([result.repo_name, result.analysis_type, result.issue_count, result.details])

    return response
