import csv
import json
from django.http import HttpResponse
from django.shortcuts import render
from .models import AnalysisResult
from .forms import GitHubURLForm
from .utils.github_clone import clone_repo
from .analysis.bandit_analysis import run_bandit_analysis
from .analysis.lizard_analysis import run_lizard_analysis
from .analysis.pylint_analysis import run_pylint_analysis
from .analysis.radon_analysis import run_radon_analysis

def analyze_repo(request):
    if request.method == "POST":
        form = GitHubURLForm(request.POST)
        if form.is_valid():
            repo_url = form.cleaned_data["github_url"]
            repo_path = clone_repo(repo_url)

            analysis_results = [
                ("Pylint", run_pylint_analysis(repo_path)),
                ("Bandit", run_bandit_analysis(repo_path)),
                ("Lizard", run_lizard_analysis(repo_path)),
                ("Radon", run_radon_analysis(repo_path)),
            ]

            repo_name = repo_url.split("/")[-1]
            for tool, result in analysis_results:
                AnalysisResult.objects.create(repo_name=repo_name, analysis_type=tool, issue_count=len(result), details=json.dumps(result))

            return render(request, "results.html", {"repo_name": repo_name, "results": analysis_results})
    else:
        form = GitHubURLForm()

    return render(request, "index.html", {"form": form})


def download_csv(request):
    """Generate a structured CSV report of the analysis results."""
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="analysis_results.csv"'

    writer = csv.writer(response)
    writer.writerow(["Repository Name", "Analysis Type", "Issue Count", "Details"])

    results = AnalysisResult.objects.all()

    for result in results:
        details = json.loads(result.details) if result.details else []
        
        # Write each issue separately with proper formatting
        for issue in details:
            writer.writerow([
                result.repo_name,
                result.analysis_type,
                result.issue_count,
                issue.get("SEVERITY", "N/A"),  # Example for Bandit
                issue.get("loc", "N/A"),  # Example for line number
                issue.get("message", "N/A")  # Generic issue message
            ])

    return response
